stages:
- build
- charts

default:
  tags:
    - kubernetes

build-dev-environment:
  image: registry.sandbox.labz.s-box.org/vcaaron/flaskr/nix:2.24.9
  stage: build
  allow_failure: true # TODO: disallow failure whenever we sort out how to build behind our airgapped environment
  rules:
    - changes:
      - dev-container/flake.nix
      - dev-container/flake.lock
      - .gitlab-ci.yml
  script:
      #install needed tools
    - nix-env --install --attr nixpkgs.skopeo
    - |
      mkdir -p "$HOME/.config/nix"
      printf 'experimental-features = nix-command flakes' > "$HOME/.config/nix/nix.conf"
      mkdir -p "/etc/containers"
      echo '{"default":[{"type":"insecureAcceptAnything"}]}' > /etc/containers/policy.json
      git config --global --add safe.directory "$(pwd)"
    - cd dev-container

    # build dev and testing environments
    - 'nix build --eval-system x86_64-linux --show-trace .#default -o polar-dev' 
    
    #  Use skopeo to inspect and upload our images
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - 'skopeo inspect docker-archive://$(readlink -f ./polar-dev)'
    - 'skopeo copy docker-archive://$(readlink -f ./polar-dev) docker://$CI_REGISTRY/polar-dev:0.1.0'

# TODO: Unfreeze whenever we settle how to build the ci container.
# SEE: https://github.com/cmu-sei/Polar/issues/33
# build-ci-environment:
#   image: registry.sandbox.labz.s-box.org/vcaaron/flaskr/nix:2.24.9
#   stage: build
#   rules:
#     - changes:
#       - dev-container/flake.nix
#       - dev-container/flake.lock
#       - .gitlab-ci.yml
#   script:
#       #install needed tools
#     - nix-env --install --attr nixpkgs.skopeo
#     - |
#       mkdir -p "$HOME/.config/nix"
#       printf 'experimental-features = nix-command flakes' > "$HOME/.config/nix/nix.conf"
#       git config --global --add safe.directory "$(pwd)"
#     - cd dev-container

#     # build dev and testing environments
#     - 'nix build --eval-system x86_64-linux --show-trace .#ciContainer -o polar-ci'
    
#     #  Use skopeo to inspect and upload our images
#     - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - 'skopeo inspect docker-archive://$(readlink -f ./polar-ci)'
#     - 'skopeo copy docker-archive://$(readlink -f ./polar-ci) docker://$CI_REGISTRY/polar-ci:0.1.0'

build-workspace:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/polar-ci:0.1.0
  stage: build
  variables:
  script:
    - git config --global --add safe.directory "$(pwd)"
    - cd src/agents/

    # TODO: run nix flake checks to run unit testing and other static analysis
    # build workspace
    - 'nix build --eval-system x86_64-linux --show-trace .#default'
    
    # Vulnerability analysis on our store
    # vulnix returns nonzero exit codes when it finds things, so we need to get around this.
    # SEE: https://github.com/nix-community/vulnix/issues/79
    - vulnix --json > vulnix-report.json || export VULNIX_EXIT=$?
    - |
      if [[ "$VULNIX_EXIT" -eq 2 ]]; then
        echo "Non-whitelisted vulnerabilities found!"
        exit 1  # Fail the job
      elif [[ "$VULNIX_EXIT" -eq 1 ]]; then
        echo "Only whitelisted vulnerabilities found, continuing..."
        exit 0  # Continue without failing
      elif [[ "$VULNIX_EXIT" -eq 0 ]]; then
        echo "No vulnerabilities found, all good."
        exit 0
      else
        echo "Unexpected error occurred!"
        exit $VULNIX_EXIT  # Fail the job with original exit code
      fi
    
    # using already built dependencies, package and containerize our components.
    - 'nix build --eval-system x86_64-linux --show-trace .#cassiniImage -o cassini'
    - 'nix build --eval-system x86_64-linux --show-trace .#observerImage -o observer'
    - 'nix build --eval-system x86_64-linux --show-trace .#consumerImage -o consumer'
    
    # Use skopeo to inspect and upload our images
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - | 
      'skopeo inspect docker-archive://$(readlink -f ./cassini)'
      'skopeo copy docker-archive://$(readlink -f ./cassini) docker://$CI_REGISTRY/cassini:0.1.0'
      'skopeo inspect docker-archive://$(readlink -f ./observer)'
      'skopeo copy docker-archive://$(readlink -f ./observer) docker://$CI_REGISTRY/polar-gitlab-observer:0.1.0'
      'skopeo inspect docker-archive://$(readlink -f ./consumer)'
      'skopeo copy docker-archive://$(readlink -f ./consumer) docker://$CI_REGISTRY/polar-gitlab-consumer:0.1.0'
  artifacts:
    paths:
      - src/agents/vulnix-results.json

make-charts:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/polar-ci:0.1.0
  stage: charts
  script:
  #TODO: Generate helm charts and push them to a hosted repository
    - cd src/deploy/ 
    # TODO: See about how we can avoid this step, we probably have to edit some security context for the k8s pod
    - chmod +x ./make-chart.sh
    - sh ./make-chart.sh cassini polar-cassini
    - sh ./make-chart.sh neo4j polar-neo4j
    - sh ./make-chart.sh gitlab polar-gitlab-agent
