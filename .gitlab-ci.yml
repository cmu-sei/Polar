stages:
- environment-setup
- build
- test
- charts

default:
  tags:
    - kubernetes

build-dev-environment:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/nix:2.24.13
  stage: environment-setup
  allow_failure: true
  rules:
    - changes:
      - dev/flake.nix
      - dev/flake.lock
      - dev/packages.nix
      - .gitlab-ci.yml
  script:
      #install needed tools
    - nix-env --install --attr nixpkgs.skopeo
    - |
      mkdir -p "$HOME/.config/nix"
      printf "experimental-features = nix-command flakes" > "$HOME/.config/nix/nix.conf"
      mkdir -p "/etc/containers"
      echo '{"default":[{"type":"insecureAcceptAnything"}]}' > /etc/containers/policy.json
      git config --global --add safe.directory "$(pwd)"
    - cd dev

    # build dev and testing environments
    - nix build --eval-system x86_64-linux --show-trace .#default -o polar-dev 
    
    #  Use skopeo to inspect and upload our images
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - skopeo inspect docker-archive://$(readlink -f ./polar-dev)
    - skopeo copy docker-archive://$(readlink -f ./polar-dev) docker://$CI_REGISTRY_IMAGE/polar-dev:0.1.0

build-ci-environment:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/nix:2.24.13
  stage: environment-setup
  allow_failure: true
  rules:
    - changes:
      - dev/flake.nix
      - dev/flake.lock
      - dev/packages.nix
      - .gitlab-ci.yml
  script:
      #install needed tools
    - nix-env --install --attr nixpkgs.skopeo

    - |
      mkdir -p "$HOME/.config/nix"
      printf "experimental-features = nix-command flakes" > "$HOME/.config/nix/nix.conf"
      mkdir -p "/etc/containers"
      echo '{"default":[{"type":"insecureAcceptAnything"}]}' > /etc/containers/policy.json
      git config --global --add safe.directory "$(pwd)"
    - cd dev
    # So, nix's container tooling doesn't support pulling from private registries very well, luckily, skopeo works just fine.
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - skopeo copy docker://registry.sandbox.labz.s-box.org/sei/polar-mirror/nix:2.24.13 docker-archive:nix.tar:nix:24.13
    # git add or else nix won't see the downloaded image
    - git add nix.tar
    # build ci environment
    - nix build --eval-system x86_64-linux --show-trace .#ciContainer -o polar-ci 
    
    # Use skopeo to inspect and upload our images
    - skopeo inspect docker-archive://$(readlink -f ./polar-ci )
    - skopeo copy docker-archive://$(readlink -f ./polar-ci ) docker://$CI_REGISTRY_IMAGE/polar-ci:0.1.0

build-workspace:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/polar-ci:0.1.0
  stage: build
  variables:
    AZURE_REGISTRY: sandboxaksacr.azurecr.us/polar
  script:
    - git config --global --add safe.directory "$(pwd)"
    
    - cd src/agents
    # build workspace
    - nix build --eval-system x86_64-linux --show-trace .#default

    # upload binary artifacts to our package registry
    - |
      for file in result/bin/*; do
        if [ -f "$file" ]; then
          filename=$(basename "$file")
          curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
               --upload-file "$file" \
               "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/polar/$CI_COMMIT_SHORT_SHA/$filename"
          echo "Uploaded: $filename"
        fi
      done
  
    # Vulnerability analysis on our store
    # vulnix returns nonzero exit codes, so we need to get around this.
    # SEE: https://github.com/nix-community/vulnix/issues/79
    - vulnix --json result > vulnix-report.json || export VULNIX_EXIT=$?
    - |
      if [[ "$VULNIX_EXIT" -eq 2 ]]; then
        echo "Non-whitelisted vulnerabilities found!"
      elif [[ "$VULNIX_EXIT" -eq 1 ]]; then
        echo "Only whitelisted vulnerabilities found."
      elif [[ "$VULNIX_EXIT" -eq 0 ]]; then
        echo "Nothing found, is the store empty?"  
      fi
    
    # using already built dependencies, package and containerize our components.
    - nix build --eval-system x86_64-linux --show-trace .#cassiniImage -o cassini
    - nix build --eval-system x86_64-linux --show-trace .#observerImage -o observer
    - nix build --eval-system x86_64-linux --show-trace .#consumerImage -o consumer
    - ls -lh
    # Use skopeo to inspect and upload our images
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - | 
      skopeo inspect docker-archive://$(readlink -f cassini)
      skopeo copy docker-archive://$(readlink -f cassini) docker://$CI_REGISTRY_IMAGE/cassini:$CI_COMMIT_SHORT_SHA
      skopeo inspect docker-archive://$(readlink -f observer)
      skopeo copy docker-archive://$(readlink -f observer) docker://$CI_REGISTRY_IMAGE/polar-gitlab-observer:$CI_COMMIT_SHORT_SHA
      skopeo inspect docker-archive://$(readlink -f consumer)
      skopeo copy docker-archive://$(readlink -f consumer) docker://$CI_REGISTRY_IMAGE/polar-gitlab-consumer:$CI_COMMIT_SHORT_SHA

    # upload to ACR
    - skopeo copy --dest-creds "$ACR_USERNAME:$ACR_TOKEN" docker-archive://$(readlink -f cassini) docker://$AZURE_REGISTRY/cassini:$CI_COMMIT_SHORT_SHA
    - skopeo copy --dest-creds "$ACR_USERNAME:$ACR_TOKEN" docker-archive://$(readlink -f observer) docker://$AZURE_REGISTRY/polar-gitlab-observer:$CI_COMMIT_SHORT_SHA
    - skopeo copy --dest-creds "$ACR_USERNAME:$ACR_TOKEN" docker-archive://$(readlink -f consumer) docker://$AZURE_REGISTRY/polar-gitlab-consumer:$CI_COMMIT_SHORT_SHA

  artifacts:
    paths:
      - src/agents/vulnix-report.json

generate-charts:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/polar-ci:0.1.0
  stage: charts
  variables:
    TARGET_ENV: sandbox
  script:
    # Clone the chart repo
    # NOTE: A deploy key should be used used to enable read/write perms
    # An access token will do in the meantime
    - git clone --depth 1 "https://$POLAR_DEPLOY_USER:$CHART_REPO_TOKEN@gitlab.sandbox.labz.s-box.org/sei/polar-deploy.git"
  
    # Generate helm charts and push them to a hosted repository 
    - chmod +x ./scripts/render-manifests.sh
    # delete old charts to make room for new configurations
    - rm -rf polar-deploy/manifests/

    # write new charts
    - sh scripts/render-manifests.sh src/deploy/polar polar-deploy/manifests
    - cd polar-deploy
    
    # Commit and push if there are changes
    - |
      git config user.email $GITLAB_USER_EMAIL
      git config user.name ci-job-$CI_JOB_NAME-$CI_JOB_ID
      git add .
    
      echo "Updated files:"
      git diff --name-only --cached

      echo "Writing metadata and pushing upstream..."
      export TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      envsubst < ../scripts/metadata.yaml.tpl > metadata.yaml
      git add metadata.yaml
      git commit -m "Update manifests from source commit $CI_COMMIT_SHA"
      git push origin "sandbox"