stages:
- build
- charts

default:
  tags:
    - kubernetes

build-dev-environment:
  image: registry.sandbox.labz.s-box.org/vcaaron/flaskr/nix:2.24.9
  stage: build
  rules:
    - changes:
      - dev/flake.nix
      - dev/flake.lock
      - dev/packages.nix
      - .gitlab-ci.yml
  script:
      #install needed tools
    - nix-env --install --attr nixpkgs.skopeo
    - |
      mkdir -p "$HOME/.config/nix"
      printf "experimental-features = nix-command flakes" > "$HOME/.config/nix/nix.conf"
      mkdir -p "/etc/containers"
      echo '{"default":[{"type":"insecureAcceptAnything"}]}' > /etc/containers/policy.json
      git config --global --add safe.directory "$(pwd)"
    - cd dev

    # build dev and testing environments
    - nix build --eval-system x86_64-linux --show-trace .#default -o polar-dev 
    
    #  Use skopeo to inspect and upload our images
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - skopeo inspect docker-archive://$(readlink -f ./polar-dev)
    - skopeo copy docker-archive://$(readlink -f ./polar-dev) docker://$CI_REGISTRY_IMAGE/polar-dev:0.1.0

# TODO: Unfreeze whenever we settle how to build the ci container.
# SEE: https://github.com/cmu-sei/Polar/issues/33
# build-ci-environment:
#   image: registry.sandbox.labz.s-box.org/vcaaron/flaskr/nix:2.24.9
#   stage: build
#   rules:
#     - changes:
#       - dev/flake.nix
#       - dev/flake.lock
#       - dev/packages.nix
#       - .gitlab-ci.yml
#   script:
#       #install needed tools
#     - nix-env --install --attr nixpkgs.skopeo
#     - |
#       mkdir -p "$HOME/.config/nix"
#       printf experimental-features = nix-command flakes > "$HOME/.config/nix/nix.conf"
#       git config --global --add safe.directory "$(pwd)"
#     - cd dev-container

#     # build test environment for usage in the remainder of the pipeline
#     - nix build --eval-system x86_64-linux --show-trace .#ciContainer -o polar-ci
    
#     #  Use skopeo to inspect and upload our images
#     - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - skopeo inspect docker-archive://$(readlink -f ./polar-ci)
#     - skopeo copy docker-archive://$(readlink -f ./polar-ci) docker://$CI_REGISTRY/polar-ci:0.1.0

build-workspace:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/polar-ci:0.1.0
  stage: build
  variables:
  script:
    - git config --global --add safe.directory "$(pwd)"
    
    - cd src/agents
    # build workspace
    - nix build --eval-system x86_64-linux --show-trace .#default
    
    # Vulnerability analysis on our store
    # vulnix returns nonzero exit codes, so we need to get around this.
    # SEE: https://github.com/nix-community/vulnix/issues/79
    - vulnix --json result > vulnix-report.json || export VULNIX_EXIT=$?
    - |
      if [[ "$VULNIX_EXIT" -eq 2 ]]; then
        echo "Non-whitelisted vulnerabilities found!"
      elif [[ "$VULNIX_EXIT" -eq 1 ]]; then
        echo "Only whitelisted vulnerabilities found."
      elif [[ "$VULNIX_EXIT" -eq 0 ]]; then
        echo "Nothing found, is the store empty?"  
      fi
    
    # using already built dependencies, package and containerize our components.
    - nix build --eval-system x86_64-linux --show-trace .#cassiniImage -o cassini
    - nix build --eval-system x86_64-linux --show-trace .#observerImage -o observer
    - nix build --eval-system x86_64-linux --show-trace .#consumerImage -o consumer
    - ls -lh
    # Use skopeo to inspect and upload our images
    - skopeo login --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - | 
      skopeo inspect docker-archive://$(readlink -f cassini)
      skopeo copy docker-archive://$(readlink -f cassini) docker://$CI_REGISTRY_IMAGE/cassini:0.1.0
      skopeo inspect docker-archive://$(readlink -f observer)
      skopeo copy docker-archive://$(readlink -f observer) docker://$CI_REGISTRY_IMAGE/polar-gitlab-observer:0.1.0
      skopeo inspect docker-archive://$(readlink -f consumer)
      skopeo copy docker-archive://$(readlink -f consumer) docker://$CI_REGISTRY_IMAGE/polar-gitlab-consumer:0.1.0
  artifacts:
    paths:
      - src/agents/vulnix-report.json

geneate-charts:
  image: registry.sandbox.labz.s-box.org/sei/polar-mirror/polar-ci:0.1.0
  stage: charts
  script:
    # Clone the chart repo
    - git clone --depth 1 "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.sandbox.labz.s-box.org/sei/polar-deploy.git"

    # Generate helm charts and push them to a hosted repository 
    - chmod +x ./scripts/make-chart.sh
    - rm -rf polar-deploy/polar 
    - sh scripts/make-chart.sh src/deploy/dhall polar-deploy/polar
    - cd polar-deploy
    # We might want to commit to other environment-specific branchhes.
    # If we do, we should probably make a template for this job and parameterize it
    # - git checkout -B "$CI_COMMIT_BRANCH"

    # Generate structured metadata to include as part of the commit
    - |
      cat <<EOF > polar/metadata.yaml
      source_commit: "$CI_COMMIT_SHA"
      source_repo: "$CI_REPOSITORY_URL"
      created_at: "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
      ci_pipeline:
        id: "$CI_PIPELINE_ID"
        url: "$CI_PIPELINE_URL"
      environment: "sandbox"
      EOF
    
    # Commit and push if there are changes
    - git add .
    - if $(git diff --quiet); then
        echo "No changes detected, skipping commit."
      else
        echo "Detected changes to polar helm chart, pushing upstream..."
        git commit -m "Update manifests from source commit $CI_COMMIT_SHA"
        git push origin "sandbox"
      fi
