# Polar (OSS)

# Copyright 2024 Carnegie Mellon University.

# NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
# INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
# UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS
# TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE
# OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE
# MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND
# WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.

# Licensed under a MIT-style license, please see license.txt or contact
# permission@sei.cmu.edu for full terms.

# [DISTRIBUTION STATEMENT A] This material has been approved for public release
# and unlimited distribution.  Please see Copyright notice for non-US
# Government use and distribution.

# This Software includes and/or makes use of Third-Party Software each subject
# to its own license.

# DM24-0470

services:
  neo4j:
    user: 7474:7474
    image: neo4j:5.26.4
    restart: unless-stopped
    networks:
      - polar
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - ../../var/neo4j_volumes/data:/var/lib/neo4j/data
      - ../../var/logs:/var/lib/neo4j/logs
      - ../../var/lib/neo4j/conf:/var/lib/neo4j/conf
      # - ../neo4j_setup/plugins:/var/lib/neo4j/plugins

  cassini:
    image: cassini:latest
    networks:
      - polar
    ports:
        - 8080:8080
    environment:
      - CASSINI_BIND_ADDR=0.0.0.0:8080
      - TLS_CA_CERT=/etc/ssl/ca_certificate.pem
      - TLS_SERVER_CERT_CHAIN=/etc/ssl/server_polar_certificate.pem
      - TLS_SERVER_KEY=/etc/ssl/server_polar_key.pem
    volumes:
      - ../certs/ca_certificates/ca_certificate.pem:/etc/ssl/ca_certificate.pem:ro
      - ../certs/server/server_polar_key.pem:/etc/ssl/server_polar_key.pem:ro
      - ../certs/server/server_polar_certificate.pem:/etc/ssl/server_polar_certificate.pem:ro    
  #
  # If you want to test what running the gitlab agents look like in a containerized environment,
  # you can unfreeze these services. Otherwise, the above will prime your environment for testing the agents
  #
  # gitlab-observer:
  #   image: polar-gitlab-observer:latest
  #   depends_on:
  #     - cassini
  #   environment:
  #     - GITLAB_ENDPOINT=""
  #     - GITLAB_TOKEN=""
  #     - BROKER_ADDR="cassini:8080"
  #     - TLS_CA_CERT=/etc/ssl/ca_certificate.pem
  #     - TLS_CLIENT_CERT=/etc/ssl/client_polar_certificate.pem
  #     - TLS_CLIENT_KEY=/etc/ssl/client_polar_key.pem
  #     - RUST_LOG=info
  #   networks:
  #     - polar
  #   volumes:
  #     - ../certs/ca_certificates/ca_certificate.pem:/etc/ssl/ca_certificate.pem:ro
  #     - ../certs/client/client_polar_certificate.pem:/etc/ssl/client_polar_certificate.pem:ro
  #     - ../certs/client/client_polar_key.pem:/etc/ssl/client_polar_key.pem:ro

  # gitlab-consumer:
  #   image: polar-gitlab-consumer:latest
  #   depends_on:
  #     - cassini
  #     - neo4j
    # environment:
    #  - BROKER_ADDR="cassini:8080"
    #  - GRAPH_USER="neo4j"
    #  - GRAPH_PASSWORD=""
    #  - GRAPH_DB="neo4j"
    #  - GRAPH_ENDPOINT="neo4j://neo4j:7687"
    #  - TLS_CA_CERT=/etc/ssl/ca_certificate.pem
    #  - TLS_CLIENT_CERT=/etc/ssl/client_polar_certificate.pem
    #  - TLS_CLIENT_KEY=/etc/ssl/client_polar_key.pem
    #  - RUST_LOG=info
  #   networks:
  #     - polar
  #   volumes:
  #     - ../certs/ca_certificates/ca_certificate.pem:/etc/ssl/ca_certificate.pem:ro
  #     - ../certs/client/client_polar_certificate.pem:/etc/ssl/client_polar_certificate.pem:ro
  #     - ../certs/client/client_polar_key.pem:/etc/ssl/client_polar_key.pem:ro

networks:
  polar:

# volumes:
#   neo4j-data:
