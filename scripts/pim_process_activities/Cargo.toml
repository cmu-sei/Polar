[package]
name = "pim_process_activities"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
toml = "0.7.3"
csv = "1.2.1"
serde = { version = "1.0.156", features = ["derive"] }
futures = "0.3.27"
tokio = { version = "1.26.0", features = ["full"] }
neo4rs = "0.6.0"

[dependencies.uuid]
version = "1.3.0"
features = [
    "v4",                # Lets you generate random UUIDs
    "fast-rng",          # Use a faster (but still sufficiently random) RNG
    "macro-diagnostics", # Enable better diagnostics for compile-time UUIDs
]

# Notes
# - rustup target add x86_64-pc-windows-gnu
# - cargo build --release --target x86_64-pc-windows-gnu
# - If you actually want to dynamic link MSVC:
#   - Grab the binaries:
#     from a Windows install and drop them in your LIB_ROOT folder. You can get MSVC from here:
#     https://learn.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features?view=msvc-170
#     https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170 
#   - apt install lld
#
#   - lld expects all MSVC files to link against to be named in lowercase. Windows FUBARs this. Get them all lowercase:
#   - for f in `find`; do mv -v "$f" "`echo $f | tr '[A-Z]' '[a-z]'`"; done
#
#   Additional Details
#   Here's a build script:
#
#   #!/bin/sh
#   # "cargo build" for the 32-bit Windows MSVC architecture.
#
#   # Set this to proper directory
#   LIB_ROOT=~/opt/rust-msvc
# 
#   # The rest shouldn't need modifications
#   VS_LIBS="$LIB_ROOT/Microsoft Visual Studio 14.0/VC/lib/"
#   KIT_8_1_LIBS="$LIB_ROOT/Windows Kits/8.1/Lib/winv6.3/um/x86/"
#   KIT_10_LIBS="$LIB_ROOT/Windows Kits/10/Lib/10.0.10240.0/ucrt/x86/"
#   export LIB="$VS_LIBS;$KIT_8_1_LIBS;$KIT_10_LIBS"
#   cargo build --target=i686-pc-windows-msvc "$@"

# vvv These need to be placed in ~/.cargo/config
# [target.x86_64-pc-windows-msvc]
# rustflags = ["-C", "target-feature=+crt-static"]
# linker = "lld-link"
